upstream nginx-server {
    server nginx-alb-server1.onrender.com;
    server nginx-alb-server2.onrender.com;
    server nginx-alb-server3.onrender.com;
}

upstream frontend_server {
    server nginx-alb.onrender.com;  # This should point to your frontend server
}

server {
    listen 80;
    listen [::]:80;
    return 302 https://$host$request_uri;  # Redirect HTTP to HTTPS, maintaining the request URI
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name load-balancer-2np6.onrender.com;  # This is your main domain

    ssl_protocols TLSv1.2 TLSv1.3;  # Ensure only modern protocols are used
    ssl_ciphers 'HIGH:!aNULL:!MD5';  # Use strong ciphers
    ssl_certificate /etc/secrets/fullchain;
    ssl_certificate_key /etc/secrets/privkey;

    location /api {
        proxy_pass http://nginx-server;  # Forward API requests to the upstream
        proxy_set_header Host $host;  # Pass the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Preserve the original client IP
        proxy_set_header X-Forwarded-Proto $scheme;  # Preserve the original scheme (HTTP or HTTPS)
    }

    location / {
        proxy_pass http://frontend_server;  # Forward all other requests to the frontend
        proxy_set_header Host $host;  # Pass the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Preserve the original client IP
        proxy_set_header X-Forwarded-Proto $scheme;  # Preserve the original scheme
    }
}
